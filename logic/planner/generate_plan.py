from at_queue.utils.decorators import component_method

from planning import *
from search import *
from at_queue.core.at_component import ATComponent
from at_queue.core.session import ConnectionParameters
import asyncio
import logging
import jsonpickle
import yaml
import json
import os
import time
from dotenv import load_dotenv
load_dotenv()

# –ü—Ä–∞–≤–∏–ª–∞ (–∏–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É Actions) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
action_templates = [
    {
        'name': 'Drive',
        'params': ['X', 'Y', 'Z'],
        'precond': 'At(X, Y) & PointOfMap(Z)',
        'effect': 'At(X, Z) & ~At(X, Y)',
        'domain': 'Driver(X) & PointOfMap(Y) & PointOfMap(Z)'
    },
    {
        'name': 'Park',
        'params': ['X', 'Y', 'Z'],
        'precond': 'At(X, Y) & Parking(Z)',
        'effect': 'At(X, Z) & ~At(X, Y)',
        'domain': 'Driver(X) & PointOfMap(Y) & Parking(Z)'
    }
]

goal_positions = {
    # –¶–µ–ª–∏ –æ—Ç –ê–¢-–†–ï–®–ê–¢–ï–õ–Ø –∏ –¢–µ–º–ø–æ—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
    'Driver1': 'Parking1',  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è 1 –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫—É 1
    'Driver2': 'Parking2',
    'Driver3': 'Parking3',
    'Driver4': 'Parking3',
    'Driver5': 'Parking2',
    'Driver6': 'Parking1',
    'Driver7': 'Parking2',
}

initial_positions = {
    'Drivers':
        {
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
            'Driver1': 'PointOfMap1',  # –í–æ–¥–∏—Ç–µ–ª—å.–°–æ—Å—Ç–æ—è–Ω–∏–µ.–ú–∞—Ä—à—Ä—É—Ç1
            'Driver2': 'PointOfMap1',
            'Driver3': 'PointOfMap1',
            'Driver4': 'PointOfMap2',
            'Driver5': 'PointOfMap2',
            'Driver6': 'PointOfMap3',
            'Driver7': 'PointOfMap3',
        },
    'Parking_locations':
        {
            # –ê–¥—Ä–µ—Å –ø–∞—Ä–∫–æ–≤–∫–∏, —Ç.–µ. –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
            'Parking1':'PointOfMap1',  # –ü–∞—Ä–∫–æ–≤–∫–∞1.–õ–æ–∫–∞—Ü–∏—è.–ü—É—à–∫–∏–Ω–∞1
            'Parking2': 'PointOfMap2',  # –ü–∞—Ä–∫–æ–≤–∫–∞2.–õ–æ–∫–∞—Ü–∏—è.–¢–æ–ª—Å—Ç–æ–≥–æ2
            'Parking3': 'PointOfMap3',
        },
}


CONFIG_YAML = os.getenv('CONFIG_YAML')
PLANNING_BASE_PATH = os.getenv('PLANNING_BASE_PATH')
SELECTED_RULES_FILE = os.getenv('SELECTED_RULES_FILE')

with open(CONFIG_YAML, "r") as config_file:
    config = yaml.safe_load(config_file)

connection_url = config["connection"]["url"]

class StateSpacePlanning(ATComponent):
    def __init__(self, connection_parameters: ConnectionParameters, *args, **kwargs):
        super().__init__(connection_parameters, *args, **kwargs)
        self._action_base = None
        self._goal_state_mapping = None


    @property
    def planning_base(self):
        with open(PLANNING_BASE_PATH) as f:
            return json.load(f)


    # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ 1
    def state_space_1(self, driver, map_point, locations, init_posit, goal_posit, action_templates):

        initial_state = ' & '.join(f'At({d}, {r})' for d, r in init_posit['Drivers'].items())
        goal_state = ' & '.join(f'At({d}, {p})' for d, p in goal_posit.items())

        domain = (
                ' & '.join(f'Driver({d})' for d in driver) + ' & ' +
                ' & '.join(f'PointOfMap({r})' for r in map_point) + ' & ' +
                ' & '.join(f'Parking({p})' for p in locations)
        )

        actions = []

        for dr in driver:
            current_map = init_posit['Drivers'][dr]
            target_location = goal_posit[dr]
            target_location_position = init_posit['Parking_locations'][target_location]
            if target_location_position is None:
                raise ValueError(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {target_location}")

            for template in action_templates:
                action_name = template['name']
                if action_name == 'Drive':
                    params = [dr, current_map, target_location_position]

                    action_str = f"{action_name}({', '.join(params)})"
                    precond = (template['precond'].replace('X', dr).
                               replace('Y', current_map)
                               .replace('Z', target_location_position))
                    effect = (template['effect'].replace('X', dr)
                              .replace('Y', current_map).replace('Z', target_location_position))
                    domain_str = (template['domain'].replace('X', dr)
                                  .replace('Y', current_map)
                                  .replace('Z', target_location_position))
                else:
                    params = [dr, target_location_position, target_location]

                    action_str = f"{action_name}({', '.join(params)})"
                    precond = (template['precond'].replace('X', dr)
                               .replace('Y', target_location_position)
                               .replace('Z', target_location))
                    effect = (template['effect'].replace('X', dr)
                              .replace('Y', target_location_position)
                              .replace('Z', target_location))
                    domain_str = (template['domain'].replace('X', dr)
                                  .replace('Y', target_location_position)
                                  .replace('Z', target_location))

                actions.append(Action(action_str, precond, effect, domain_str))

        return PlanningProblem(initial_state, goal_state, actions, domain), actions


    def gen_plan(self, driver, map_point, locations, init_posit, goal_posit, act_temp):
        world_state = {'Drivers': init_posit['Drivers'].copy(),
                       'Parking_locations': init_posit['Parking_locations'].copy()}
        final_solution = []
        act_list = []

        for dr in driver:
            print(f"\nüöó –ü–ª–∞–Ω –¥–ª—è {dr}")

            start_time = time.time()
            target_location = goal_posit[dr]  # –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏

            single_driver_problem, act = self.state_space_1(
                [dr],
                map_point,
                locations,
                {'Drivers': {dr: init_posit['Drivers'][dr]},
                 'Parking_locations': {target_location: init_posit['Parking_locations'][target_location]}},
                {dr: goal_posit[dr]},
                act_temp
            )

            result = astar_search(ForwardPlan(single_driver_problem), display=True)
            if result is None:
                raise ValueError(f"‚ùå astar search –Ω–µ –Ω–∞—à–µ–ª —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {dr}")
            sol = result.solution()
            # sol = astar_search(ForwardPlan(single_driver_problem), display=True).solution()
            sol = list(map(lambda action: Expr(action.name, *action.args), sol))

            end_time = time.time()
            elapsed_time = end_time - start_time

            print(f"–í—Ä–µ–º—è –¥–ª—è {dr}: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")

            final_solution.extend(sol)
            act_list.append(act)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏—Ä (–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –Ω–∞ –º–µ—Å—Ç–µ) - –∫–∞–∫ –±—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
            if 'Result_for_executive_subsystem' not in world_state:
                world_state['Result_for_executive_subsystem'] = {}
            world_state['Result_for_executive_subsystem'][dr] = goal_posit[dr]

            print(f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è: {sol}')

        print(f'\nüåç –ù–∞—à —á—É–¥–µ—Å–Ω—ã–π –º–∏—Ä: {world_state}')
        print(f'üîë –í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (actions): {act_list}')

        return str(final_solution)


    @component_method
    def process_agent_goal(self, at_solver_goal):
        # –≠–¢–û –°–ê–ú–û –ì–ï–ù–ï–†–ò–¢–°–Ø
        # 1
        drivers = list(set(initial_positions['Drivers'].keys()))
        # 2
        parkings = list(set(initial_positions['Parking_locations'].keys()))
        # 3
        map_points = []
        for points in initial_positions.values():
            map_points.extend(points.values())
        map_points = list(set(map_points))
        # 4
        # actions_name = [action['name'] for action in action_templates]

        print(f'–¶–µ–ª—å: {at_solver_goal}')
        final_plan = self.gen_plan(
            drivers,
            map_points,
            parkings,
            initial_positions,
            goal_positions,
            action_templates
        )
        print(f'Generated Plan: {final_plan}')

        return final_plan


async def main():
    connection_parameters = ConnectionParameters(connection_url) # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
    at_planner = StateSpacePlanning(connection_parameters=connection_parameters) # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await at_planner.initialize() # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ RabbitMQ
    await at_planner.register() # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—Ä–æ–∫–µ—Ä

    if not os.path.exists('/var/run/planner/'):
        os.makedirs('/var/run/planner/')

    with open('/var/run/planner/pidfile.pid', 'w') as f:
        f.write(str(os.getpid()))

    await at_planner.start() # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())




# # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π. –≠—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –∏–∑ xml (—Ñ–∞–π–ª –ø—Ä–æ–≥–æ–Ω–∞)
# drivers = ['Driver1']
# map_points = ['PointOfMap1', 'PointOfMap2', 'PointOfMap3']
# parkings = ['Parking1', 'Parking2']
#
# # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π. –í –∏–¥–µ–∞–ª–µ —Ç—É—Ç —Ç–æ–∂–µ –Ω—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥
# # –∏ —Å–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å —Å–∞–º–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—Ä–∞—Ç—å—Å—è –∏–∑ xml (—Ñ–∞–π–ª –ø—Ä–æ–≥–æ–Ω–∞)
# initial_positions = {
#     # –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è (—á—Ç–æ–±—ã –±—ã–ª–æ —á–µ—Å—Ç–Ω–æ) —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ - —Ç–æ –µ—Å—Ç—å –Ω–µ —Ç—É–ø–æ–π –º–∞–ø–ø–∏–Ω–≥, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
#     # –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ –∑–Ω–∞–Ω–∏—è–º –≤–≤–æ–¥–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–º–æ—â—å—é UI
#     'Drivers':
#         {
#             'Driver1': 'PointOfMap1', # –í–æ–¥–∏—Ç–µ–ª—å.–°–æ—Å—Ç–æ—è–Ω–∏–µ.–ú–∞—Ä—à—Ä—É—Ç1
#         },
#     'Parking_locations':
#         {
#             'Parking1':'PointOfMap2', # –ü–∞—Ä–∫–æ–≤–∫–∞1.–õ–æ–∫–∞—Ü–∏—è.–ü—É—à–∫–∏–Ω–∞1
#             'Parking2': 'PointOfMap3', # –ü–∞—Ä–∫–≤–æ–∫–∞2.–õ–æ–∫–∞—Ü–∏—è.–¢–æ–ª—Å—Ç–æ–≥–æ2
#         },
# }
# # –≠—Ç–æ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –º–∞–ø–ø–∏—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä
# goal_positions = {
#     'Driver1': 'Parking1',
# }
#
#
# entities = {
#     'Driver': ['D1'],
#     'PointOfMap': ['Point1', 'Point2', 'Point3'],
#     'Parking': ['P1', 'P3']
# }
#
# relations = {
#     'At': [('D1', 'Point1')],
#     'Parking_locations': [('P1', 'Point2'), ('P2', 'Point3')],
#     'Goal': [('At', 'D1', 'P3')]
# }
#
# actions = [
#     {
#         'name': 'Drive',
#         'params': ['X', 'Y', 'Z'],
#         'precond': 'At(X, Y) & PointOfMap(Z)',
#         'effect': 'At(X, Z) & ~At(X, Y)',
#         'domain': 'Driver(X) & PointOfMap(Y) & PointOfMap(Z)'
#     },
#     {
#         'name': 'Park',
#         'params': ['X', 'Y', 'Z'],
#         'precond': 'At(X, Y) & Parking(Z)',
#         'effect': 'At(X, Z) & ~At(X, Y)',
#         'domain': 'Driver(X) & PointOfMap(Y) & Parking(Z)'
#     }
# ]


    # # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ 1
    # def from_to_pp_1(self, driver, map_point, park, init_posit, goal_posit):
    #     initial_state = ' & '.join(
    #         f'At({d}, {r})' for d, r in init_posit['Drivers'].items())  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    #     goal_state = ' & '.join(f'At({d}, {p})' for d, p in goal_posit.items())
    #
    #     domain = (
    #             ' & '.join(f'Driver({d})' for d in driver) + ' & ' +
    #             ' & '.join(f'PointOfMap({r})' for r in map_point) + ' & ' +
    #             ' & '.join(f'Parking({p})' for p in park)
    #     )
    #
    #     actions = []
    #
    #     for dr in driver:
    #         current_map = init_posit['Drivers'][dr]  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
    #         target_parking = goal_posit[dr]
    #         target_parking_location = init_posit['Parking_locations'][target_parking]  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏
    #
    #         # –î–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω—É—é –¥–æ—Ä–æ–≥—É
    #         actions.append(Action(f'Drive({dr}, {current_map}, {target_parking_location})',
    #                               precond=f'At({dr}, {current_map}) & PointOfMap({target_parking_location})',
    #                               effect=f'At({dr}, {target_parking_location}) & ~At({dr}, {current_map})',
    #                               domain=f'Driver({dr}) & PointOfMap({current_map}) & PointOfMap({target_parking_location})'))
    #
    #         # –î–µ–π—Å—Ç–≤–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏
    #         actions.append(Action(f'Park({dr}, {target_parking_location}, {target_parking})',
    #                               precond=f'At({dr}, {target_parking_location}) & Parking({target_parking})',
    #                               effect=f'At({dr}, {target_parking}) & ~At({dr}, {target_parking_location})',
    #                               domain=f'Driver({dr}) & PointOfMap({target_parking_location}) & Parking({target_parking})'))
    #
    #     return PlanningProblem(initial_state, goal_state, actions, domain)


    # def generate_plan(self, driver, map_point, park, init_posit, goal_posit):
    #     # ssg = StateSpaceGenerator(entities, relations, actions)
    #     # single_driver_problem = ssg.generate_state_space()
    #
    #     world_state = {'Drivers': init_posit['Drivers'].copy(),
    #                    'Parking_locations': init_posit['Parking_locations'].copy()}
    #     final_solution = []
    #
    #     for dr in driver:
    #         print(f"\n –ü–ª–∞–Ω –¥–ª—è {dr}")
    #
    #         start_time = time.time()
    #         target_parking = goal_posit[dr]
    #
    #         single_driver_problem = self.from_to_pp_1(
    #             [dr], map_point, park,
    #             {'Drivers': {dr: init_posit['Drivers'][dr]},
    #              'Parking_locations': {target_parking: init_posit['Parking_locations'][target_parking]}},
    #             {dr: goal_posit[dr]},
    #         )
    #
    #         # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É
    #         solution = astar_search(ForwardPlan(single_driver_problem), display=True).solution()
    #         solution = list(map(lambda action: Expr(action.name, *action.args), solution))
    #
    #         end_time = time.time()
    #         elapsed_time = end_time - start_time
    #
    #         print(f"–í—Ä–µ–º—è –¥–ª—è {dr}: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
    #
    #         # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –ø–ª–∞–Ω
    #         final_solution.extend(solution)
    #
    #         # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏—Ä (–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω) - –∫–∞–∫ –±—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
    #         if 'Result_for_executive_subsystem' not in world_state:
    #             world_state['Result_for_executive_subsystem'] = {}
    #             world_state['Result_for_executive_subsystem'][dr] = goal_posit[dr]
    #
    #         print(solution)
    #         print(f'–ù–∞—à —á—É–¥–µ—Å–Ω—ã–π –º–∏—Ä: {world_state}')
    #
    #     return str(final_solution)